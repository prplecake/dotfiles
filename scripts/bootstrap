#!/usr/bin/env bash

#CURRENT_SHELL=$(ps -p $$|tail -n +2|awk '{print $4}')
echo "Current shell is $SHELL ($0)"
#echo "$CURRENT_SHELL"

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)


# Exit immediately if a command exits with a non-zero status.
set -e

# Turn these on to debug
# set -x # Print commands and their arguments as they are executed.
# set -v # Print shell input lines as they are read.

USAGE="
The bootstrap command creates links in your home directory \`~/\`
to the files in the repo.

OPTIONS:
    --with-xdg
        Symlinks files in \`~/.config\`. This will fail if that
        directory doesn't exist.
    -h, --help
        Print this help.

Additional information can be found at the repo homepage:
    https://git.sr.ht/~mjorgensen/dorfiles
"

for i in "$@"
do
    case $i in
        -h|--help)
            echo "$USAGE"
            exit
            ;;
        --with-xdg)
            WITH_XDG=true
            shift
            ;;
        *)
            echo "$USAGE"
            exit
        ;;
    esac
done

echo ""

source scripts/_helpers

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then
    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then
        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi
    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ] # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info "installing dotfiles"

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 \
      -name '*.symlink')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

install_xdg_config_dir() {
  info "installing xdg config dir"

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 \
      -name '*.xdgconfig')
  do
    dst="$HOME/.config/$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

detect_system () {
  info "detecting system"

  system=
  if [ "$(uname)" == "Darwin" ]; then
    system=Darwin
  elif [ "$(uname)" == "Linux" ]; then
    info "sourcing /etc/*release"
    source /etc/*release
    system=$ID
  fi

  success "System detected: $system"
}

run_setup_scripts () {
  info "installing packages"

  while true
  do
    user "Continue running system-specific scripts? (Y/n)"
    read -n 1 ans

    case $ans in
      [yY]* ) break;;
      [nN]* ) exit;;
      *) user "Answer please.";;
    esac
  done

  case "$system" in
    Darwin)
      ;;
    ubuntu)
      info "calling another script"
      info "$(pwd)"
      scripts/setup_scripts/ubuntu
      info "other script finished"
      ;;
    debian)
      ;;
    *)
      fail "System not detected."
  esac
}

install_zsh () {
  info "checking for zsh..."
  which zsh &>/dev/null
  if [ ! "$?" == 0 ]; then
    info "installing zsh..."
    case $system in
      Darwin)
        which brew &>/dev/null
        if [ "$?" == 0 ]; then
          brew install zsh
        else
          fail "brew not installed."
        fi
        ;;
      *)
        ;;
    esac
  else
    success "zsh is already installed!"
  fi
}

install_dotfiles
if [ "$WITH_XDG" = true ]; then
    install_xdg_config_dir
fi
# install_packages
# detect_system
# install_zsh
# run_setup_scripts
